<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="800"
					   height="600" xmlns:views="views.*"
					   creationComplete="creationCompleteHandler(event)"
					   showStatusBar="false"
					   >
	<fx:Script>
		<![CDATA[
			import model.AppData;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import views.popups.Popup_CloseWindow_Prompt;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				AppData.mainApp =  this;
			}
			
			private var popup_close_window_prompt:Popup_CloseWindow_Prompt;
			
			private function closeWindowButtonClickHandler(event:MouseEvent):void
			{
				if(AppData.savedImageBitmapData)
				{
					this.popup_close_window_prompt = new Popup_CloseWindow_Prompt();
					popup_close_window_prompt.open(this, true);
					PopUpManager.centerPopUp(this.popup_close_window_prompt);
				}else
				{
					AppData.mainApp.nativeWindow.close();
				}
				//
				AppData.clearWorkspace();
			}
			
			private function minWindowButtonClickHandler(event:MouseEvent):void
			{
				AppData.mainApp.nativeWindow.minimize();
			}
			////
			private var isFullScreen:Boolean = false;
			private function maxWindowButtonClickHandler(event:MouseEvent):void
			{
				if(isFullScreen)
				{
					AppData.mainApp.nativeWindow.restore();
					isFullScreen = false;
				}
				else
				{
					AppData.mainApp.nativeWindow.maximize();
					isFullScreen = true;
				}
			}
			//
			protected function navigatorcontent_editor_showHandler(event:FlexEvent):void
			{
				id_eitor_view.updateImageViews();
			}
			//Auto navigate to View_Verified
			//@see issue: http://www.misho.ca/flex-4-viewstack-page-navigation-part-one/
			protected function navigatorcontent_verifing_showHandler(event:FlexEvent):void
			{
				var timeoutID:uint;
				timeoutID = setTimeout(lauchVerifiedView, 1000);
				function lauchVerifiedView():void
				{
					AppData.mainApp.id_viewStack.selectedIndex =  AppData.VIEW_VERIFIED;
					clearTimeout(timeoutID);
				}
				//
				id_verifing_view.showEff.play();
			}
			protected function navigatorcontent_verified_showHandler(event:FlexEvent):void
			{
				id_verified_view.updateImageViews();
			}
			protected function navigatorcontent_typeset_showHandler(event:FlexEvent):void
			{
				id_typeset_view.updateImageViews();
				id_typeset_view.updateTileList();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!--skinClass="skins.HW_ApplicationSkin"-->
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace views "views.*";
		s|SkinnablePopUpContainer {  
			modalTransparencyBlur: 5;
			modalTransparency: 0.5;
			modalTransparencyColor: #FFFFFF;
			modalTransparencyDuration: 100;
		} 
		
		s|WindowedApplication 
		{
			skinClass:ClassReference("skins.HW_SparkChromeWindowedApplicationSkin");
		}
		
	</fx:Style>
	<mx:ViewStack id="id_viewStack" width="100%" height="100%" >
		<s:NavigatorContent width="100%" height="100%">
			<views:IntroView/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%">
			<views:UploadView/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" show="navigatorcontent_editor_showHandler(event)">
			<views:EditorView id="id_eitor_view"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" show="navigatorcontent_verifing_showHandler(event)">
			<views:VerifingView id="id_verifing_view"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" show="navigatorcontent_verified_showHandler(event)">
			<views:VerifiedView id="id_verified_view"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" show="navigatorcontent_typeset_showHandler(event)">
			<views:TypesetView id="id_typeset_view"/>
		</s:NavigatorContent>
	</mx:ViewStack>
	<s:Button x="0" y="0" width="100%" height="45" mouseDown="this.nativeWindow.startMove();" alpha="0"/>
	<s:Button x="694" y="14" label="Button" skinClass="skins.button.HW_CloseButton_Skin" click="maxWindowButtonClickHandler(event)" visible="false"/>
	<s:Button x="724" y="14" label="Button" skinClass="skins.button.HW_MinButton_Skin" click="minWindowButtonClickHandler(event)"/>
	<s:Button x="754" y="14" label="Button" skinClass="skins.button.HW_CloseButton_Skin" click="closeWindowButtonClickHandler(event)"/>
</s:WindowedApplication>
