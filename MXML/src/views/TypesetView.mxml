<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:views="views.*" width="800" height="600" xmlns:components="views.components.*" xmlns:view="com.vstyran.transform.view.*" xmlns:utils="utils.*">
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import model.AppData;
			
			import mx.collections.ArrayList;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.graphics.BitmapSmoothingQuality;
			import mx.graphics.ImageSnapshot;
			import mx.printing.FlexPrintJobScaleType;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			import utils.FlexPrintJob;
			
			import views.renderers.ImageRenderer;
			//
			protected function id_list_typeset_changeHandler(event:IndexChangeEvent):void
			{
				//
				AppData.selectedTypesetSizeIndex = event.newIndex;
				//
				this.updateImageViews();
				//
				this.updateTileList();
			}
			
			protected function cancelTypeset_button_clickHandler(event:MouseEvent):void
			{
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_EIDTOR;	
			}
			//@see http://flextutorial.org/2009/06/23/understanding-flex-print-job-from-a-to-z/
			protected function printOut_button_clickHandler(event:MouseEvent):void
			{
//				this.id_resize_normal.play();
				this.updateTileList(false);//Expand to print.
				//Set timeout
				this.id_list_tile.callLater(printOut);
				//Adding snapshot file
				var snapshot:BitmapData = ImageSnapshot.captureBitmapData(this.id_list_tile);
				this.id_list_tile_snapshot.source = new Bitmap(snapshot);
				//Hidden the expanded result
				this.id_list_tile.visible = false;
			}
			
			override public function get viewBackgroundImage():Bitmap
			{
				return new AppData.BG_IMG_02() as Bitmap;
			}
			
			public function updateImageViews():void
			{
				//
				trace("AppData.selectedTypesetSizeIndex:",AppData.selectedTypesetSizeIndex);
				this.id_image_frame.source = "";
				this.id_image_frame.source = AppData.ARRAY_TYPESET_FRAMES[AppData.selectedTypesetSizeIndex];
//				this.id_border_container.setStyle("backgroundImage",AppData.ARRAY_TYPESET_FRAMES[AppData.selectedTypesetSizeIndex]);
				trace("AppData.selectedCertSizeIndex:",AppData.selectedCertSizeIndex);
//				this.id_image_tile.source = AppData.ARRAY_TYPESET_TILE_IMGS[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex];
//				trace("this.id_image_tile.source:",id_image_tile.source);
			}
			
			public function updateTileList(resizeForDisplay:Boolean=true):void
			{
				trace("AppData.selectedTypesetSizeIndex:",AppData.selectedTypesetSizeIndex);
				trace("AppData.selectedCertSizeIndex:",AppData.selectedCertSizeIndex);
				//
				requestedRowCount = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].row;
				requestedColumnCount = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].col;
				requestedShiftIndex = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].shiftIndex;
				trace("requestedShiftIndex:",requestedShiftIndex);
				requestedOffsetX = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].offsetX;
				requestedOffsetY = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].offsetY;
				//
				var definedImageWidth:Number;
				var definedImageHeight:Number;
				var definedImageSource:Object = AppData.savedImageFie.nativePath;
//				var definedImageSource:Object = AppData.uploadedImageFile.nativePath;
				if(resizeForDisplay)
				{
					definedImageWidth = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].w ;
					definedImageHeight = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].h ;
//					definedImageSource =  AppData.savedImageFie.nativePath;
				}else
				{
					definedImageWidth = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].w_ *AppData.PIXEL_2_PRINT ;
					definedImageHeight = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].h_*AppData.PIXEL_2_PRINT ;
//					definedImageSource =  AppData.uploadedImageFile.nativePath;
				}
				var definedImageRotation:Number = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].r;
//				var definedImageRotation:Number = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].r + AppData.savedImageOpts.r;
				//
				var definedContainerScaleX:Number = definedImageWidth/this.getRequiredCertPhotoWidth();
				var definedContainerScaleY:Number = definedImageHeight/this.getRequiredCertPhotoHeight();
				//
//				AppData.savedImageMatrix.scale(definedContainerScaleX,definedContainerScaleY);
				//
//				var definedImageScaleX:Number = AppData.savedImageOpts.sX * definedContainerScaleX;
//				var definedImageScaleY:Number = AppData.savedImageOpts.sY * definedContainerScaleY;
				var definedImageScaleX:Number = definedContainerScaleX * AppData.savedImgOprOV.sX;
				var definedImageScaleY:Number = definedContainerScaleY * AppData.savedImgOprOV.sY;
				//
				var definedImageTx:Number = AppData.savedImageMatrix.tx;
				var definedImageTy:Number = AppData.savedImageMatrix.ty;
				//Trace info:
				trace("definedImageWidth:",definedImageWidth,
					"definedImageHeight:",definedImageHeight,
					"definedImageRotation:",definedImageRotation,
					"definedImageScaleX:",definedImageScaleX,
					"definedImageScaleY:",definedImageScaleY,
					"definedImageTx:",definedImageTx,
					"definedImageTy:",definedImageTy
				);
				
				//DataProvider
				var imageArray:Array = [];
//				this.id_list_tile.dataProvider = new ArrayList(imageArray);
				//
				for(var i:int=0;i<requestedRowCount;i++)
				{
					for(var j:int=0;j<requestedColumnCount;j++)
					{
						var index:int = i*requestedRowCount+j;
						//TODO:rotate those special items
//						if( requestedShiftIndex.indexOf(index)!=-1){
//							definedImageRotation = 270;
//						}
						var data:Object = {
								source:definedImageSource,
								w:definedImageWidth,
								h:definedImageHeight,
								sX:definedImageScaleX,
								sY:definedImageScaleY,
								r:definedImageRotation,
								x:definedImageTx,
								y:definedImageTy
						}
						imageArray.push(data);
					}
				}
				//
				this.id_list_tile.dataProvider = new ArrayList(imageArray);
				this.id_list_tile.x = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].x;
				this.id_list_tile.y = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].y;
//				this.id_list_tile.callLater(function():void{
//					id_list_tile.x = id_image_tile.x;
//					id_list_tile.y = id_image_tile.y;
//				});
			}
			//[Bindable] values here
			[Bindable]
			private var requestedRowCount:int;
			[Bindable]
			private var requestedColumnCount:int;
			//Display excption identify value here.
			private var requestedShiftIndex:Array;//For shift index of image item rotation.
			private var requestedOffsetX:Number;//For print position offsetX
			private var requestedOffsetY:Number;//For print position offsetY
			//
			private function printOut():void
			{
				//Adding snapshot file
//				var snapshot:BitmapData = ImageSnapshot.captureBitmapData(this.id_list_tile);
//				AppData.saveImageFile(snapshot,false,false,false);
				//
				var flexPrintJob:FlexPrintJob = new FlexPrintJob();
				//
				var option:PrintJobOptions = new PrintJobOptions();
//				option.pixelsPerInch = 600;
				//
				flexPrintJob.printJob.orientation = PrintJobOrientation.LANDSCAPE;
				//PageSize setting manually
				flexPrintJob.printJob.selectPaperSize(AppData.getPrintPlainText(AppData.selectedTypesetSizeIndex));//4x6
//				flexPrintJob.printJob.printer = "";//TODO:use the stored printer name;
				//Auto select papersize(Optional)
				/*
				if (PrintJob.supportsPageSetupDialog)
				{
				//					////					var uiOption:PrintUIOptions = new PrintUIOptions();
					flexPrintJob.printJob.showPageSetupDialog();
				//					//
					trace("flexPrintJob.printJob:", ObjectUtil.toString(flexPrintJob.printJob) );
				}else
				{
					flexPrintJob.printJob.selectPaperSize(AppData.getPrintPlainText(AppData.selectedTypesetSizeIndex));//4x6
				} 
				*/
				//
//				var bitMapData:BitmapData  = new BitmapData(this.id_list_tile.width,this.id_list_tile.height);
//				bitMapData.drawWithQuality(this.id_list_tile,null,null,null,new Rectangle(0,0,this.id_list_tile.width,this.id_list_tile.height),true,StageQuality.BEST);
				//
				var printRect:Rectangle = new Rectangle(requestedOffsetX,requestedOffsetY,this.id_list_tile.width,this.id_list_tile.height);
				//				//
				if(flexPrintJob.start())
				{
					//Save printer name for the next operation.
					AppData.savedPrinterName = flexPrintJob.printJob.printer;
					trace("AppData.savedPrinterName:",AppData.savedPrinterName);
					//					flexPrintJob.addObject(this.id_list_tile,FlexPrintJobScaleType.NONE);
					//@see http://stackoverflow.com/questions/1642008/how-to-dynamically-set-print-page-margins-in-flash-cs3
					flexPrintJob.printJob.addPage(this.id_list_tile,printRect,option);
					//					flexPrintJob.addObject(this.id_list_tile_real,FlexPrintJobScaleType.NONE);
					flexPrintJob.send();
				}
				//Rollback to display
				this.updateTileList();
				//Display the resized for display
				this.id_list_tile.visible = true;
				this.id_list_tile_snapshot.source = "";
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" contentBackgroundAlpha="0"
					   backgroundImage="{viewBackgroundImage}"
					   >
		<components:HW_List_Typeset id="id_list_typeset" height="105"
									change="id_list_typeset_changeHandler(event)"/>
		
		<s:Image id="id_image_frame" left="200" top="40" />
		
		<!--borderColor="#5e6468" borderAlpha="0.1"
		contentBackgroundAlpha="0" contentBackgroundColor="#5e6468"-->
		<s:List id="id_list_tile" autoLayout="true" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				itemRenderer="views.renderers.ImageRenderer"
				useVirtualLayout="false" 
				borderVisible="false"
		>
			<s:layout>
				<!--<utils:HW_TileLayout-->
				<s:TileLayout
				 requestedRowCount="{this.requestedRowCount}" requestedColumnCount="{this.requestedColumnCount}" 
							  verticalGap="14" horizontalGap="14"
							  paddingLeft="7" paddingBottom="7" paddingRight="7" paddingTop="7" 
							  useVirtualLayout="false"
							  />
			</s:layout>
		</s:List>
		<s:Image id="id_list_tile_snapshot" x="{id_list_tile.x}" y="{id_list_tile.y}" visible="{id_list_tile_snapshot.source!=''}"/>
		<!--<s:Image id="id_list_tile_print" x="{id_list_tile.x}" y="{id_list_tile.y}" visible="{id_list_tile_print.source!=''}" smooth="true" smoothingQuality="{BitmapSmoothingQuality.HIGH}"/>-->
		<!--</s:BorderContainer>-->
		
		<s:Button x="383" y="500" label="Back2Verify" skinClass="skins.button.HW_Back2VerifyButton_Skin" click="cancelTypeset_button_clickHandler(event)" buttonMode="true" useHandCursor="true"/>
		<s:Button x="505" y="500" label="PRINT_OUT" skinClass="skins.button.HW_PrintButton_Skin" click="printOut_button_clickHandler(event)" buttonMode="true" useHandCursor="true"/>
		
		<!--<view:UITransformTool id="id_uit_tool" target="{id_list_tile}" />-->
		
	</s:BorderContainer>
</views:ViewBase>
