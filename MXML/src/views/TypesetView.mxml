<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:views="views.*" width="800" height="600" xmlns:components="views.components.*" xmlns:view="com.vstyran.transform.view.*">
	<fx:Script>
		<![CDATA[
			import model.AppData;
			
			import mx.collections.ArrayList;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			
			import spark.events.IndexChangeEvent;
			
			import views.renderers.ImageRenderer;
			
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				//
				this.updateImageViews();
				//
				this.updateTileList();
			}
			
			protected function id_list_typeset_changeHandler(event:IndexChangeEvent):void
			{
				//
				AppData.selectedTypesetSizeIndex = event.newIndex;
				//
				this.updateImageViews();
				//
				this.updateTileList();
			}
			
			protected function cancelTypeset_button_clickHandler(event:MouseEvent):void
			{
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_EIDTOR;			
			}
			//@see http://flextutorial.org/2009/06/23/understanding-flex-print-job-from-a-to-z/
			protected function printOut_button_clickHandler(event:MouseEvent):void
			{
				var option:PrintJobOptions = new PrintJobOptions(true);
//				option.pixelsPerInch = 72;
				//
//				var flexPrintJob:FlexPrintJob = new FlexPrintJob();
//				this.id_border_container.scaleX = this.id_border_container.scaleY = 1.667;
//				//
//				if(flexPrintJob.start())
//				{
//					flexPrintJob.addObject(this.id_border_container,FlexPrintJobScaleType.NONE);
////					flexPrintJob.addPage(this.id_border_container,new Rectangle(id_list_tile.x-1,id_list_tile.y-1,id_list_tile.width+2,id_list_tile.height+2),option);
//				}
//				flexPrintJob.send();
				//@see http://www.fising.cn/docs/AS3_Reference/flash/printing/PrintJob.html#includeExamplesSummary
				var printOut:PrintJob = new PrintJob();
//					option.pixelsPerInch = 72;
				//
//				this.id_border_container.scaleX = this.id_border_container.scaleY = 1.667;
				var requiredImageWidth:Number = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].w;
				var requiredImageHeight:Number = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].h;
				this.id_list_tile.width = requestedColumnCount*requiredImageWidth;
				this.id_list_tile.height = requestedRowCount*requiredImageHeight;
				//
				if(printOut.start())
				{
					//					printOut.addPage();
					printOut.addPage(this.id_border_container,new Rectangle(
						id_list_tile.x-2,
						id_list_tile.y-2,
						id_list_tile.width+(requestedColumnCount+1)*2,
						id_list_tile.height+(requestedRowCount+1)*2
					),option);
					printOut.send();
				}
			}
			
			override public function get viewBackgroundImage():Bitmap
			{
				return new AppData.BG_IMG_02() as Bitmap;
			}
			
			private function updateImageViews():void
			{
				//
				trace("AppData.selectedTypesetSizeIndex:",AppData.selectedTypesetSizeIndex);
//				id_image_frame.source = AppData.ARRAY_TYPESET_FRAMES[AppData.selectedTypesetSizeIndex];
				trace("AppData.selectedCertSizeIndex:",AppData.selectedCertSizeIndex);
//				id_image_tile.source = AppData.ARRAY_TYPESET_TILE_IMGS[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex];
//				trace("id_image_tile.source:",id_image_tile.source);
			}
			
			private function updateTileList():void
			{
				//
				requestedRowCount = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].x;
				requestedColumnCount = AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].y;
				//
				requiredImageWidth = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].w;
				requiredImageHeight = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].h;
				requiredImageRotation = AppData.ARRAY_TYPESET_TILE_POINT[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex].r;
				//DataProvider
				var imageArray:Array = [];
				for(var i:int=0;i<requestedRowCount;i++)
				{
					for(var j:int=0;j<requestedColumnCount;j++)
					{
						var data:Object = {
							source:AppData.savedImageFie.nativePath,
								width:requiredImageWidth,
								height:requiredImageHeight,
								rotation:requiredImageRotation
						}
						imageArray.push(data);
//						this.id_list_tile.updateRenderer(ImageRenderer as IVisualElement,i*requestedColumnCount+j,data);
					}
				}
				this.imageArrayList = new ArrayList(imageArray);
				//
//				this.id_list_tile.dataProvider = new ArrayList(imageArray);
//				//Coloumn,Row 
//				(this.id_list_tile.layout as TileLayout).requestedColumnCount = requestedColumnCount;
//				(this.id_list_tile.layout as TileLayout).requestedRowCount = requestedRowCount;
				//
				this.id_list_tile.x = this.getRequiredTillingImageX();
				this.id_list_tile.y = this.getRequiredTillingImageY();
			}
			//[Bindable] values here
			[Bindable]
			private var requestedRowCount:int;
			[Bindable]
			private var requestedColumnCount:int;
			[Bindable]
			private var imageArrayList:ArrayList;
//			x="{id_image_tile.x}" y="{id_image_tile.y}"
			private var requiredImageWidth:int;
			private var requiredImageHeight:int;
			private var requiredImageRotation:int;
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" contentBackgroundAlpha="0"
					   backgroundImage="{viewBackgroundImage}"
					   >
		<components:HW_List_Typeset id="id_list_typeset" height="105"
									change="id_list_typeset_changeHandler(event)"/>
		
		<!--<s:Image id="id_image_frame" left="200" top="40" />-->
		<s:BorderContainer id="id_border_container" left="200" top="40" backgroundAlpha="0" borderVisible="false">
			<!--<s:Image id="id_image_tile" />-->
			<s:DataGroup  id="id_list_tile"
						  dataProvider="{this.imageArrayList}" 
						  itemRenderer="views.renderers.ImageRenderer"
						  >
				<s:layout>
					<s:TileLayout requestedRowCount="{this.requestedRowCount}" requestedColumnCount="{this.requestedColumnCount}" 
								  verticalGap="2" horizontalGap="2" 
								  />
				</s:layout>
			</s:DataGroup>
		</s:BorderContainer>
		
		<s:Button x="383" y="500" label="Back2Verify" skinClass="skins.button.HW_Back2VerifyButton_Skin" click="cancelTypeset_button_clickHandler(event)"/>
		<s:Button x="505" y="500" label="PRINT_OUT" skinClass="skins.button.HW_PrintButton_Skin" click="printOut_button_clickHandler(event)"/>
		
		<!--<view:UITransformTool id="id_uit_tool" target="{id_list_tile}" />-->
		
	</s:BorderContainer>
</views:ViewBase>
