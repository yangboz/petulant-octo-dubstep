<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:views="views.*" width="800" height="600" xmlns:components="views.components.*">
	<fx:Script>
		<![CDATA[
			import model.AppData;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				//
				this.updateImageViews();
				//
				this.updateTileList();
			}
			
			protected function id_list_typeset_changeHandler(event:IndexChangeEvent):void
			{
				//
				AppData.selectedTypesetSizeIndex = event.newIndex;
				//
				this.updateImageViews();
				//
				this.updateTileList();
			}
			
			protected function cancelTypeset_button_clickHandler(event:MouseEvent):void
			{
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_EIDTOR;			
			}
			
			protected function printOut_button_clickHandler(event:MouseEvent):void
			{
				//@see http://www.fising.cn/docs/AS3_Reference/flash/printing/PrintJob.html#includeExamplesSummary
				var printOut:PrintJob = new PrintJob();
				if(printOut.start())
				{
//					printOut.addPage();
//					printOut.send();
				}
			}
			
			override public function get viewBackgroundImage():Bitmap
			{
				return new AppData.BG_IMG_02() as Bitmap;
			}
			
			private function updateImageViews():void
			{
				//
				trace("AppData.selectedTypesetSizeIndex:",AppData.selectedTypesetSizeIndex);
				id_image_frame.source = AppData.ARRAY_TYPESET_FRAMES[AppData.selectedTypesetSizeIndex];
				trace("AppData.selectedCertSizeIndex:",AppData.selectedCertSizeIndex);
				id_image_tile.source = AppData.ARRAY_TYPESET_TILE_IMGS[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex];
				trace("id_image_tile.source:",id_image_tile.source);
			}
			
			private function updateTileList():void
			{
				//
				requestedRowCount = (AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex] as Point).x;
				requestedColumnCount = (AppData.ARRAY_TYPESET_TILE_SIZE[AppData.selectedTypesetSizeIndex][AppData.selectedCertSizeIndex] as Point).y;
				//DataProvider
				var imageArray:Array = [];
				for(var i:int=0;i<requestedRowCount;i++)
				{
					for(var j:int=0;j<requestedColumnCount;j++)
					{
						imageArray.push({source:AppData.savedImageFie.nativePath});
					}
				}
				this.imageArrayList = new ArrayList(imageArray);
				//
//				this.id_list_tile.dataProvider = new ArrayList(imageArray);
//				//Coloumn,Row 
//				(this.id_list_tile.layout as TileLayout).requestedColumnCount = requestedColumnCount;
//				(this.id_list_tile.layout as TileLayout).requestedRowCount = requestedRowCount;
			}
			//[Bindable] values here
			[Bindable]
			private var requestedRowCount:int;
			[Bindable]
			private var requestedColumnCount:int;
			[Bindable]
			private var imageArrayList:ArrayList;
			
//			x="{id_image_tile.x}" y="{id_image_tile.y}"
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" contentBackgroundAlpha="0"
					   backgroundImage="{viewBackgroundImage}"
					   >
		<components:HW_List_Typeset id="id_list_typeset" height="105"
									change="id_list_typeset_changeHandler(event)"/>
		
		<s:Image id="id_image_frame" left="200" top="40" />
		<s:Image id="id_image_tile" left="200" top="40" />
		<s:DataGroup  id="id_list_tile" left="200" top="40" 
					  width="500" horizontalCenter="0" verticalCenter="0" 
					  dataProvider="{this.imageArrayList}" itemRenderer="views.renderers.ImageRenderer">
			<s:layout>
				<s:TileLayout />
			</s:layout>
			<!--<s:layout>
				<s:TileLayout requestedRowCount="{this.requestedRowCount}" requestedColumnCount="{this.requestedColumnCount}"/>
			</s:layout>-->
		</s:DataGroup>
		
		<s:Button x="383" y="500" label="Back2Verify" skinClass="skins.button.HW_Back2VerifyButton_Skin" click="cancelTypeset_button_clickHandler(event)"/>
		<s:Button x="505" y="500" label="PRINT_OUT" skinClass="skins.button.HW_PrintButton_Skin" click="printOut_button_clickHandler(event)"/>
	</s:BorderContainer>
</views:ViewBase>
