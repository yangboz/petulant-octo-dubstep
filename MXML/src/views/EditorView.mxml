<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:views="views.*" width="800" height="600" 
				xmlns:components="views.components.*"
				xmlns:view="com.vstyran.transform.view.*" 
				xmlns:model="com.vstyran.transform.model.*" xmlns:spark="de.patrickheinzelmann.components.spark.*">
	<fx:Script>
		<![CDATA[
			import com.vstyran.transform.consts.GuidelineType;
			import com.vstyran.transform.skins.TransformToolSkin;
			
			import model.AppData;
			
			import mx.controls.sliderClasses.Slider;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
//			private var img_editor_width:Number;
			private function get img_editor_width():Number
			{
				return (AppData.ARRAY_SIZE_CERTS[AppData.selectedCertSizeIndex] as Point).x;
			}
			
//			private var img_editor_height:Number;
			private function get img_editor_height():Number
			{
				return (AppData.ARRAY_SIZE_CERTS[AppData.selectedCertSizeIndex] as Point).y;
			}
			
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				///Display image_editor
				this.id_image_edit.source = AppData.uploadedImageFile.nativePath;
				this.id_image_edit.addEventListener(Event.COMPLETE,function(event:Event):void{
					selectUITransformTool(new MouseEvent(MouseEvent.CLICK));
				});
				///Upldate UI images.
				this.updateImageViews();
				///
//				this.addEventListener(MouseEvent.CLICK,deselectUITransformTool);
			}
			
			override protected function id_list_changeHandler(event:IndexChangeEvent):void
			{
				super.id_list_changeHandler(event);
				//
//				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_VERIFING;
				///Upldate UI images.
				this.updateImageViews();
			}
			
			override public function get viewBackgroundImage():Bitmap
			{
				return new AppData.BG_IMG_01() as Bitmap;
			}
			
			private function updateImageViews():void
			{
				//
				this.id_image_instruction.source = AppData.ARRAY_INS_CERT_TEXTS[AppData.selectedCertSizeIndex];
				//
				this.id_image_frame.source = AppData.ARRAY_EDITOR_PHOTO_FRAMES[AppData.selectedCertSizeIndex];
				this.id_image_guide.source = AppData.ARRAY_EDITOR_PHOTO_GUIDES[AppData.selectedCertSizeIndex];
			}
			
			protected function reupload_button_clickHandler(event:MouseEvent):void
			{
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_UPLOAD;			
			}
			
			protected function editnext_button_clickHandler(event:MouseEvent):void
			{
				//Save transformed image here:
				trace(id_uitransform_tool);
				//
//				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_VERIFING;	
			}
			//
			private function deselectUITransformTool(event:MouseEvent):void
			{
				id_uitransform_tool.targets = null;
				id_uitransform_tool.visible = false;
				id_uitransform_tool.includeInLayout = false;
			}
			
			private function selectUITransformTool(event:MouseEvent):void
			{
				id_uitransform_tool.targets = [id_image_edit];
				id_uitransform_tool.visible = true;
				id_uitransform_tool.includeInLayout = true;
				//
				id_uitransform_tool.width = id_image_edit.bitmapData.width;
				id_uitransform_tool.height = id_image_edit.bitmapData.height;
			}
			
			private function onEditorScaleSliderChange(event:Event):void
			{
				this.id_uitransform_tool.scaleX =  this.id_vslider_scale.value;
				this.id_uitransform_tool.scaleY =  this.id_vslider_scale.value;
				this.id_image_edit.scaleX =  this.id_vslider_scale.value;
				this.id_image_edit.scaleY =  this.id_vslider_scale.value;
			}
			private function onEditorRotateSliderChange(event:Event):void
			{
				this.id_uitransform_tool.rotation = this.id_hslider_rotate.value;
				this.id_image_edit.rotation = this.id_hslider_rotate.value;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" contentBackgroundAlpha="0"
					   backgroundImage="{viewBackgroundImage}"
					   >
		<components:HW_List_Cert id="id_list" change="id_list_changeHandler(event)"/>
		
		<s:Image id="id_image_instruction" x="200" y="60"/>
		
		<s:Image id="id_image_frame" x="410" y="190"/>
		<s:Image id="id_image_edit" x="410" y="190" />
		<s:Image id="id_image_guide" x="410" y="190" enabled="false"/>
		
		<view:UITransformTool id="id_uitransform_tool">
			<view:bounds>
				<model:Bounds x="{id_image_frame.x}" y="{id_image_frame.y}" width="{img_editor_width}" height="{img_editor_height}"/>
			</view:bounds>
			<view:guidelines>
				<model:Guideline type="{GuidelineType.HORIZONTAL_EDGE}" value="{id_image_frame.width}" fraction="1"/>
				<model:Guideline type="{GuidelineType.VERTICAL_EDGE}" value="{id_image_frame.height}" fraction="1"/>
			</view:guidelines>
		</view:UITransformTool>
		
		<s:Button x="383" y="500" label="RE_UPLOAD" skinClass="skins.HW_Back2UploadButton_Skin" click="reupload_button_clickHandler(event)"/>
		<s:Button x="505" y="500" label="EDIT_NEXT" skinClass="skins.HW_EditorNextButton_Skin" click="editnext_button_clickHandler(event)"/>
		<spark:HSlider id="id_hslider_rotate" x="393" y="438" 
					   showTrackHighlight="true"
				   change="onEditorRotateSliderChange(event)" stepSize="5" minimum="-360" maximum="360" value="0"
				   width="200"
				   />
		<s:Button x="349" y="425" label="ROTATE" skinClass="skins.HW_RotateButton_Skin"/>
		<s:Button x="625" y="198" label="ZOOM_IN" skinClass="skins.HW_ZoomInButton_Skin"/>
		<s:Button x="625" y="373" label="ZOOM_OUT" skinClass="skins.HW_ZoomOutButton_Skin"/>
		<spark:VSlider id="id_vslider_scale" x="638" y="230" 
					   showTrackHighlight="true"
				   change="onEditorScaleSliderChange(event)" stepSize="0.1" minimum="0.1" maximum="2" value="1"
				   height="140"
				   />
		
	</s:BorderContainer>
</views:ViewBase>
