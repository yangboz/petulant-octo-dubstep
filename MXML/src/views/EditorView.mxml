<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:views="views.*" width="800" height="600" 
				xmlns:components="views.components.*"
				xmlns:view="com.vstyran.transform.view.*" 
				xmlns:model="com.vstyran.transform.model.*" 
				xmlns:spark="de.patrickheinzelmann.components.spark.*"
				>
	<fx:Script>
		<![CDATA[
			import com.vstyran.transform.consts.GuidelineType;
			import com.vstyran.transform.events.TransformEvent;
			import com.vstyran.transform.model.Guideline;
			import com.vstyran.transform.skins.TransformToolSkin;
			import com.vstyran.transform.utils.DataUtil;
			
			import model.AppData;
			
			import mx.controls.sliderClasses.Slider;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.effects.Rotate;
			import spark.events.IndexChangeEvent;
			//UITransformTools: @see http://vstyran-flex.ho.ua/
//			private var img_editor_width:Number;
			private function get img_editor_width():Number
			{
				return (AppData.ARRAY_SIZE_CERTS[AppData.selectedCertSizeIndex] as Point).x;
			}
			
//			private var img_editor_height:Number;
			private function get img_editor_height():Number
			{
				return (AppData.ARRAY_SIZE_CERTS[AppData.selectedCertSizeIndex] as Point).y;
			}
			
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				///Display image_editor
				this.id_image_edit.source = AppData.uploadedImageFile.nativePath;
				this.id_image_edit.addEventListener(Event.COMPLETE,function(event:Event):void{
					selectUITransformTool(new MouseEvent(MouseEvent.CLICK));
				});
				///Upldate UI images.
				this.updateImageViews();
				//Update tool
				this.updateUITransformTools();
				///
//				this.addEventListener(MouseEvent.CLICK,deselectUITransformTool);
			}
			
			override protected function id_list_changeHandler(event:IndexChangeEvent):void
			{
				super.id_list_changeHandler(event);
				//
//				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_VERIFING;
				///Upldate UI images.
				this.updateImageViews();
				//Update tool
				this.updateUITransformTools();
			}
			
			override public function get viewBackgroundImage():Bitmap
			{
				return new AppData.BG_IMG_01() as Bitmap;
			}
			
			private function updateImageViews():void
			{
				//
				this.id_image_instruction.source = AppData.ARRAY_INS_CERT_TEXTS[AppData.selectedCertSizeIndex];
				//
				this.id_image_frame.source = AppData.ARRAY_EDITOR_PHOTO_FRAMES[AppData.selectedCertSizeIndex];
				this.id_image_guide.source = AppData.ARRAY_EDITOR_PHOTO_GUIDES[AppData.selectedCertSizeIndex];
				this.id_image_mask.source = AppData.ARRAY_EDITOR_PHOTO_GUIDES[AppData.selectedCertSizeIndex];
				//Mask
				id_image_edit.mask = id_image_mask;
			}
			
			protected function reupload_button_clickHandler(event:MouseEvent):void
			{
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_UPLOAD;			
			}
			
			protected function editnext_button_clickHandler(event:MouseEvent):void
			{
				//Save transformed image here:
				trace(id_uitransform_tool);
				//
//				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_VERIFING;	
				//Draw bitmap data, then save to file
				
			}
			//
			private function deselectUITransformTool(event:MouseEvent):void
			{
				id_uitransform_tool.targets = null;
				id_uitransform_tool.visible = false;
				id_uitransform_tool.includeInLayout = false;
			}
			
			private function selectUITransformTool(event:MouseEvent):void
			{
				id_uitransform_tool.targets = [id_image_edit];
				id_uitransform_tool.visible = true;
				id_uitransform_tool.includeInLayout = true;
				//UITransformTool
				id_uitransform_tool.width = id_image_edit.bitmapData.width;
				id_uitransform_tool.height = id_image_edit.bitmapData.height;
			}
			
			private function onEditorScaleSliderChange(event:Event):void
			{
				this.applyZoom(this.id_image_edit,this.id_vslider_scale.value);
				//Update tool
				this.updateUITransformTools();
			}
			private function onEditorRotateSliderChange(event:Event):void
			{
				this.applyRotate(this.id_image_edit,this.id_hslider_rotate.value);
				//Update tool
				this.updateUITransformTools();
			}
			
			protected function rotate90ButtonClickHandler(event:MouseEvent):void
			{
				this.id_hslider_rotate.value += 90;
				this.applyRotate(this.id_image_edit,this.id_hslider_rotate.value);		
			}
			
			protected function zoomInButtonClickHandler(event:MouseEvent):void
			{
				this.id_vslider_scale.value += 0.1; 
				this.applyZoom(this.id_image_edit,this.id_vslider_scale.value);
			}
			
			protected function zoomOutButtonClickHandler(event:MouseEvent):void
			{
				this.id_vslider_scale.value -= 0.1; 
				this.applyZoom(this.id_image_edit,this.id_vslider_scale.value);
			}
			
			private function applyRotate(target:DisplayObject,angle:Number):void
			{
				// Calculate rotation and offsets
				var radians:Number = angle * (Math.PI / 180.0);
				var offsetWidth:Number = target.width/2.0;
				var offsetHeight:Number =  target.height/2.0;
				// Perform rotation
				var matrix:Matrix = new Matrix();
				matrix.translate(-offsetWidth, -offsetHeight);
				matrix.rotate(radians);
				matrix.translate(+offsetWidth, +offsetHeight);
				matrix.concat(this.id_image_edit.transform.matrix);
				target.transform.matrix = matrix; 
				//Update tool
				this.updateUITransformTools();
			}
			private function applyZoom(target:DisplayObject,ratio:Number):void
			{
				target.scaleX = ratio;
				target.scaleY = ratio;
				//Update tool
				this.updateUITransformTools();
			}
			
			protected function id_uitransform_tool_transformationCompleteHandler(event:TransformEvent):void
			{
				trace(event);
//				switch(event.transformationType)
//				{
//					case 
//				}
				
			}
			
			private function updateUITransformTools():void
			{
				//Update tool
				this.id_uitransform_tool.updateTool(true);
				//Update tool guide lines
				var guidelines:Vector.<Guideline> = new Vector.<Guideline>();
				
				for (var i:int = 0; i < id_border_container.numElements; i++) 
				{
					var element:IVisualElement = id_border_container.getElementAt(i);
					
					if(element is Image && id_uitransform_tool.target != element)
					{
						var box:Rectangle = DataUtil.createData(element as Image).getBoundingBox();
						
						guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x, 3));
						guidelines.push(new Guideline(GuidelineType.VERTICAL_CENTER, box.x+box.width/2, 3));
						guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x+box.width, 3));
						
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y, 3));
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_CENTER, box.y+box.height/2, 3));
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y+box.height, 3));
						
						if((element as Image).rotation%90 != 0)
						{
							var guideLine:Guideline = new Guideline(GuidelineType.ROTATION, (element as Image).rotation, 3);
							guideLine.userData = element;
							guidelines.push(guideLine);
						}
					}
				}
				id_uitransform_tool.guidelines = guidelines;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer id="id_border_container" width="100%" height="100%" contentBackgroundAlpha="0"
					   backgroundImage="{viewBackgroundImage}"
					   >
		<components:HW_List_Cert id="id_list" change="id_list_changeHandler(event)"/>
		
		<s:Image id="id_image_instruction" x="200" y="60"/>
		
		<s:Image id="id_image_frame" x="410" y="190"/>
		<s:Image id="id_image_edit" x="410" y="190" />
		<s:Image id="id_image_mask" x="410" y="190"/>
		<s:Image id="id_image_guide" x="410" y="190" enabled="false"/>
		
		<view:UITransformTool id="id_uitransform_tool" skinClass="skins.uiTransformTool.TransformToolSkin3" transformationComplete="id_uitransform_tool_transformationCompleteHandler(event)">
			<!--<view:bounds>
				<model:Bounds x="{id_image_frame.x}" y="{id_image_frame.y}" width="{img_editor_width}" height="{img_editor_height}"/>
			</view:bounds>-->
			<!--<view:guidelines>
				<model:Guideline type="{GuidelineType.HORIZONTAL_CENTER}" value="400" fraction="3"/>
				<model:Guideline type="{GuidelineType.VERTICAL_CENTER}" value="300" fraction="3"/>
			</view:guidelines>-->
			
		</view:UITransformTool>
		
		<s:Button x="383" y="500" label="RE_UPLOAD" skinClass="skins.button.HW_Back2UploadButton_Skin" click="reupload_button_clickHandler(event)"/>
		<s:Button x="505" y="500" label="EDIT_NEXT" skinClass="skins.button.HW_EditorNextButton_Skin" click="editnext_button_clickHandler(event)"/>
		<spark:HSlider id="id_hslider_rotate" x="393" y="438" 
					   showTrackHighlight="true" skinClass="skins.slider.HW_EditorRotateHSlider_Skin"
				   change="onEditorRotateSliderChange(event)" stepSize="5" minimum="-360" maximum="360" value="0"
				   width="200" 
				   />
		<s:Button x="349" y="425" label="ROTATE" skinClass="skins.button.HW_RotateButton_Skin" click="rotate90ButtonClickHandler(event)"/>
		<s:Button x="625" y="198" label="ZOOM_IN" skinClass="skins.button.HW_ZoomInButton_Skin" click="zoomInButtonClickHandler(event)"/>
		<s:Button x="625" y="373" label="ZOOM_OUT" skinClass="skins.button.HW_ZoomOutButton_Skin" click="zoomOutButtonClickHandler(event)"/>
		<spark:VSlider id="id_vslider_scale" x="638" y="230"
					   showTrackHighlight="true" skinClass="skins.slider.HW_EditorScaleVSlider_Skin"
				   change="onEditorScaleSliderChange(event)" stepSize="0.1" minimum="0.1" maximum="2" value="1"
				   height="140" 
				   />
		
	</s:BorderContainer>
</views:ViewBase>
