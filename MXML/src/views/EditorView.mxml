<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:views="views.*" width="800" height="600" 
				xmlns:components="views.components.*"
				xmlns:view="com.vstyran.transform.view.*" 
				xmlns:model="com.vstyran.transform.model.*" 
				xmlns:spark="de.patrickheinzelmann.components.spark.*"
				>
	<fx:Script>
		<![CDATA[
			import com.godpaper.as3.ImageMagick.AS3ImageMagick;
			import com.godpaper.as3.ImageMagick.ImageMagickEvent;
			import com.godpaper.as3.ImageMagick.ImageMagickFacts;
			import com.godpaper.as3.ImageMagick.ImageMagickFactsBuilder;
			import com.vstyran.transform.consts.GuidelineType;
			import com.vstyran.transform.consts.TransformationType;
			import com.vstyran.transform.events.GuidelineEvent;
			import com.vstyran.transform.events.TransformEvent;
			import com.vstyran.transform.model.Guideline;
			import com.vstyran.transform.utils.DataUtil;
			
			import model.AppData;
			
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.graphics.BitmapSmoothingQuality;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			import utils.ImageUtil;
			
			import model.ImageOprVO;
			//AS3ImageMagick
			private var as3ImageMagick:AS3ImageMagick;
			//
			public function get process():NativeProcess
			{
				return as3ImageMagick.nativeProcess;
			}
			//UITransformTools: @see http://vstyran-flex.ho.ua/
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				///Upldate UI images.
				this.updateImageViews();
				//Update tool
				this.updateUITransformTools();
			}
			
			override protected function id_list_changeHandler(event:IndexChangeEvent):void
			{
				super.id_list_changeHandler(event);
				///Upldate UI images.
				this.updateImageViews();
				///Align Image Views.
				this.alignImageView();
				///Image autosize
				this.autoResizeImageView();
				//Update tool
				this.updateUITransformTools();
			}
			
			override public function get viewBackgroundImage():Bitmap
			{
				return new AppData.BG_IMG_01() as Bitmap;
			}
			
			public function updateImageViews():void
			{
				///Display image_editor
				this.id_image_edit.source = AppData.uploadedImageFile.nativePath;
				this.id_image_edit.addEventListener(Event.COMPLETE,id_image_edit_completeHandler);
				//
				this.id_image_edit.minHeight = this.getRequiredCertPhotoHeight();
				this.id_image_edit.minWidth = this.getRequiredCertPhotoWidth();
				//
				this.id_image_instruction.source = AppData.ARRAY_INS_CERT_TEXTS[AppData.selectedCertSizeIndex];
				//
				this.id_image_frame.source = AppData.ARRAY_EDITOR_PHOTO_FRAMES[AppData.selectedCertSizeIndex];
				//
				var id_image_frame_point:Point = AppData.ARRAY_EDITOR_POINT_FRAMES[AppData.selectedCertSizeIndex] as Point;
				this.id_image_frame.x = id_image_frame_point.x;
				this.id_image_frame.y = id_image_frame_point.y;
				//
				this.id_image_guide.source = AppData.ARRAY_EDITOR_PHOTO_GUIDES[AppData.selectedCertSizeIndex];
				var id_image_guide_point:Point = AppData.ARRAY_EDITOR_POINT_GUIDES[AppData.selectedCertSizeIndex] as Point;
				this.id_image_guide.x = id_image_guide_point.x;
				this.id_image_guide.y = id_image_guide_point.y;
				//Image group
//				this.id_group.width = this.getRequiredCertPhotoWidth();
//				this.id_group.height = this.getRequiredCertPhotoHeight();
				var id_group_point:Point = AppData.ARRAY_EDITOR_POINT_PHOTOS[AppData.selectedCertSizeIndex] as Point;
				this.id_group.x = id_group_point.x;
				this.id_group.y = id_group_point.y;
				this.id_group.maxWidth = this.getRequiredCertPhotoWidth();
				this.id_group.maxHeight = this.getRequiredCertPhotoHeight();
				///
				this.selectUITransformTool(new MouseEvent(MouseEvent.CLICK));
			}
			
			protected function alignImageView():void
			{
				this.id_image_edit.x = 0;
				this.id_image_edit.y = 0;
				this.id_image_edit.rotation = 0;
			}
			//
			protected function autoResizeImageView():void
			{
				//
//				var contentW:Number = this.id_image_edit.contentWidth;
//				var contentH:Number = this.id_image_edit.contentHeight;
				var contentW:Number = this.id_image_edit.bitmapData.width;
				var contentH:Number = this.id_image_edit.bitmapData.height;
				var contentWHratio:Number = contentW/contentH;
				//
				var requiredW:Number = getRequiredCertPhotoWidth();
				var requiredH:Number = getRequiredCertPhotoHeight();
				var requiredWHratio:Number = requiredW/requiredH;
				//Ratio check
				if(contentW<=contentH)
				{
					this.id_image_edit.width = requiredW;
					this.id_image_edit.height = requiredW * contentH/contentW;
					//
//					this.id_image_edit.maxWidth = requiredW + (AppData.MAX_UIT_HEIGHT_DEFAULT-this.id_image_edit.height) * contentW/contentH;
//					this.id_image_edit.maxHeight = AppData.MAX_UIT_HEIGHT_DEFAULT;
				}else
				{
					this.id_image_edit.width = requiredH * contentW/contentH;
					this.id_image_edit.height = requiredH;
					//
//					this.id_image_edit.maxHeight = requiredH + (AppData.MAX_UIT_WIDTH_DEFAULT-this.id_image_edit.width) * contentH/contentW;
//					this.id_image_edit.maxWidth = AppData.MAX_UIT_WIDTH_DEFAULT;
				}
				var scaleX:Number = this.id_image_edit.width/contentW;
				var scaleY:Number = this.id_image_edit.height/contentH;
				//
				trace("AppData.savedImageMatrix.scale:[scaleX]=",scaleX," [scaleY]=",scaleY);
				AppData.savedImageMatrix.scale(scaleX,scaleY);
				//
				AppData.savedImageOperation.sX = scaleX;
				AppData.savedImageOperation.sY = scaleY;
				AppData.savedImageOperation.oX = (requiredW-this.id_image_edit.width)/AppData.uploadFileBitmapData.width;
				AppData.savedImageOperation.oY = (requiredH-this.id_image_edit.height)/AppData.uploadFileBitmapData.height; 
				//
				trace("AppData.savedImageOperation:",AppData.savedImageOperation);
			}
			
			protected function reupload_button_clickHandler(event:MouseEvent):void
			{
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_UPLOAD;
				//Clear id_image_edit opration history
				this.id_image_edit.rotation = 0;
				this.id_image_edit.width = NaN;
				this.id_image_edit.height = NaN;
				this.id_image_edit.x = 0;
				this.id_image_edit.y = 0;
				//Clear UITransform tool's opration history
				this.deselectUITransformTool(new MouseEvent(MouseEvent.CLICK));
				//Avoid cache issue.
				this.id_image_edit.source = "";
			}
			
			protected function editnext_button_clickHandler(event:MouseEvent):void
			{
				//Save transformed image here:
				trace("AppData.savedImageMatrix(in saving):",AppData.savedImageMatrix);
				//Draw bitmap data, then save to file
				var requiredPhotoWidth:Number = this.getRequiredCertPhotoWidth();
				var requiredPhotoHeight:Number = this.getRequiredCertPhotoHeight();
				var bitMapData:BitmapData = new BitmapData(requiredPhotoWidth,requiredPhotoHeight,true); 
				/* var bitMapData:BitmapData = ImageUtil.resample(AppData.uploadFileBitmapData,requiredPhotoWidth,requiredPhotoHeight,
					AppData.savedImageMatrix.a,AppData.savedImageMatrix.d,0,
					StageQuality.BEST); */
				/*
				AppData.savedImageMatrix = new Matrix();
				AppData.savedImageMatrix.scale(requiredPhotoWidth/this.id_image_edit.contentWidth,requiredPhotoHeight/this.id_image_edit.contentHeight);
				//
				var rect:Rectangle = new Rectangle(0,0,requiredPhotoWidth,requiredPhotoHeight);
				var bufferBitmapData:BitmapData = new BitmapData(rect.width,rect.height);
				bufferBitmapData.copyPixels(AppData.originalFileBitmapData,rect,new Point(0,0));
				//
//				bufferMatix.scale(requiredPhotoWidth/this.id_image_edit.contentWidth,requiredPhotoHeight/this.id_image_edit.contentHeight);
				bitMapData.draw(bufferBitmapData,this.id_uit_tool.transform.matrix); 
				*/
//				bitMapData.draw(this.id_group,null,null,null,new Rectangle(0,0,requiredPhotoWidth,requiredPhotoHeight),true); 
				bitMapData.drawWithQuality(this.id_group,null,null,null,new Rectangle(0,0,requiredPhotoWidth,requiredPhotoHeight),true,StageQuality.BEST);
//				bitMapData.drawWithQuality(AppData.uploadFileBitmapData,AppData.savedImageMatrix,null,null,new Rectangle(0,0,requiredPhotoWidth,requiredPhotoHeight),true,StageQuality.BEST);
				//
//				trace("this.id_uit_tool.transform:",this.id_uit_tool.transform);
				//
				AppData.saveImageFile(bitMapData);
//				var oprString:String = String("-crop,").concat(AppData.savedImageOperation
				//Crop the origianl photo with ImageMagick
				var exePath:String = "convert.exe";
				var facts:ImageMagickFacts = new ImageMagickFactsBuilder(AppData.uploadedImageFile.nativePath,AppData.savedImageFie.nativePath)
					.with_command("-crop,960x960-10-10")
					.build();
				//Execute the ImageMagick native process here.
				as3ImageMagick = new AS3ImageMagick(exePath,facts);
				//
				as3ImageMagick.start();
				//Event listeners to the ImageMagick.
				as3ImageMagick.addEventListener(ImageMagickEvent.STANDARD_OUTPUT_DATA, dataHandler); 
				as3ImageMagick.addEventListener(ImageMagickEvent.STANDARD_ERROR_DATA, errorDataHandler); 
				as3ImageMagick.addEventListener(ImageMagickEvent.STANDARD_OUTPUT_CLOSE,outputCloseHandler);
				//
				var dataBytes:ByteArray = new ByteArray(); 
				var errorBytes:ByteArray = new ByteArray(); 
				//
				function dataHandler(event:ProgressEvent):void
				{ 
					trace("dataHandler(event):",event.toString());
					var bytes:IDataInput = process.standardOutput as IDataInput;
		            var outputString: String = bytes.readUTFBytes(bytes.bytesAvailable).toString();
		            trace(outputString);
				}
				function errorDataHandler(event:ProgressEvent):void
				{ 
					trace("errorDataHandler(event):",event.toString());
					var bytes:IDataInput = process.standardError as IDataInput;
					            var outputString: String = bytes.readUTFBytes(bytes.bytesAvailable).toString();
					//					            trace("errorDataHandler:",outputString);
					//					errorBytes.writeBytes(process.standardError.readBytes(process.standardError.bytesAvailable)); 
					//					trace("errorBytes:",errorBytes.toString());
				}
				function outputCloseHandler(event:Event):void
				{
					trace("outputCloseHandler:",event.toString());
				}
				//
				AppData.mainApp.id_viewStack.selectedIndex = AppData.VIEW_VERIFING;	
			}
			//
			private function deselectUITransformTool(event:MouseEvent):void
			{
				id_uit_tool.targets = null;
				id_uit_tool.visible = false;
				id_uit_tool.includeInLayout = false;
			}
			
			private function selectUITransformTool(event:MouseEvent):void
			{
				id_uit_tool.targets = [id_image_edit];
				id_uit_tool.visible = true;
				id_uit_tool.includeInLayout = true;
				//UITransformTool
//				id_uit_tool.width = id_image_edit.bitmapData.width;
//				id_uit_tool.height = id_image_edit.bitmapData.height;
			}
			
			private function onEditorScaleSliderChange(event:Event):void
			{
//				this.applyZoom(this.id_image_edit,this.id_vslider_scale.value);
				//Update tool
				this.updateUITransformTools();
			}
			private function onEditorRotateSliderChange(event:Event):void
			{
				this.applyRotate(this.id_image_edit,this.id_hslider_rotate.value);
				//Update tool
				this.updateUITransformTools();
			}
			
			protected function rotate90ButtonClickHandler(event:MouseEvent):void
			{
				this.id_hslider_rotate.value += 90;
				this.applyRotate(this.id_image_edit,this.id_hslider_rotate.value);		
			}
			
			protected function zoomInButtonClickHandler(event:MouseEvent):void
			{
//				this.id_vslider_scale.value += 0.1; 
//				this.applyZoom(this.id_image_edit,this.id_vslider_scale.value);
			}
			
			protected function zoomOutButtonClickHandler(event:MouseEvent):void
			{
//				this.id_vslider_scale.value -= 0.1; 
//				this.applyZoom(this.id_image_edit,this.id_vslider_scale.value);
			}
			
			private function applyRotate(target:DisplayObject,angle:Number):void
			{
				// Calculate rotation and offsets
				var radians:Number = angle * (Math.PI / 180.0);
				var offsetWidth:Number = target.width/2.0;
				var offsetHeight:Number =  target.height/2.0;
				// Perform rotation
				var matrix:Matrix = new Matrix();
				matrix.translate(-offsetWidth, -offsetHeight);
				matrix.rotate(radians);
				matrix.translate(+offsetWidth, +offsetHeight);
				matrix.concat(this.id_image_edit.transform.matrix);
				target.transform.matrix = matrix; 
				//Update tool
				this.updateUITransformTools();
			}
			private function applyZoom(target:DisplayObject,ratio:Number):void
			{
//				target.scaleX = ratio;
//				target.scaleY = ratio;
				//
				var posX:Number = target.x;
				var posY:Number = target.y;
				target.x =target.y = 0;
				target.scaleX = ratio;
				target.scaleY = ratio;
				target.x = posX;
				target.y = posY;
				//Update tool
				this.updateUITransformTools();
			}
			
			protected function tool_transformationCompleteHandler(event:TransformEvent):void
			{
//				trace("(before transformationComplete)toolData.matrix:",event.toolData.matrix);
				trace("(before transformationComplete)data.matrix:",event.data.matrix);
				//
//				AppData.savedImageMatrix = event.data.matrix;
				switch(event.transformationType)
				{
					case TransformationType.RESIZE:
						AppData.savedImageMatrix.scale(this.id_image_edit.scaleX,this.id_image_edit.scaleY);
//						this.autoResizeImageView();
						break;
					case TransformationType.ROTATE:
//						AppData.savedImageMatrix.rotate(this.id_image_edit.rotation);
						var angle:Number = this.id_image_edit.rotation;
						// Calculate rotation and offsets
						var radians:Number = angle * (Math.PI / 180.0);
						var offsetWidth:Number = this.id_image_edit.width/2.0;
						var offsetHeight:Number =  this.id_image_edit.height/2.0;
						// Perform rotation
						AppData.savedImageMatrix.translate(-offsetWidth, -offsetHeight);
						AppData.savedImageMatrix.rotate(radians);
						AppData.savedImageMatrix.translate(+offsetWidth, +offsetHeight);
						AppData.savedImageMatrix.concat(this.id_image_edit.transform.matrix);
						break;
					case TransformationType.MOVE:
						AppData.savedImageMatrix.translate(event.data.matrix.tx,event.data.matrix.ty);
						break;
					default:
						break;
				}
//				trace("(after transformationComplete)toolData.matrix:",event.toolData.matrix);
				trace("(after transformationComplete)data.matrix:",event.data.matrix);
			}
			
			protected function tool_transformationHandler(event:TransformEvent):void
			{
//				trace("toolData.matrix(transformation):",event.toolData.matrix);
//				trace("data.matrix(transformation):",event.data.matrix);
			}
			
			private function updateUITransformTools():void
			{
				//Update tool
				this.id_uit_tool.updateTool(true);
/*	
				//Update tool guide lines
				var guidelines:Vector.<Guideline> = new Vector.<Guideline>();
				
				for (var i:int = 0; i < id_border_container.numElements; i++) 
				{
					var element:IVisualElement = id_border_container.getElementAt(i);
					
					if(element is Image && id_uit_tool.target != element)
					{
						var box:Rectangle = DataUtil.createData(element as Image).getBoundingBox();
						
						guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x, 3));
//						guidelines.push(new Guideline(GuidelineType.VERTICAL_CENTER, box.x+box.width/2, 3));
//						guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x+box.width, 3));
						
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y, 3));
//						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_CENTER, box.y+box.height/2, 3));
//						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y+box.height, 3));
						
						if((element as Image).rotation%90 != 0)
						{
							var guideLine:Guideline = new Guideline(GuidelineType.ROTATION, (element as Image).rotation, 3);
							guideLine.userData = element;
							guidelines.push(guideLine);
						}
					}
				}
				id_uit_tool.guidelines = guidelines;
*/				
			}
			protected function tool_guidelinesUpdateHandler(event:GuidelineEvent):void
			{
				if(event.cross && event.cross.vGuideline)
					vGuide.x = event.cross.vGuideline.value;
				vGuide.visible = (event.cross && event.cross.vGuideline);
				
				if(event.cross && event.cross.hGuideline)
					hGuide.y = event.cross.hGuideline.value;
				hGuide.visible = (event.cross && event.cross.hGuideline);
				
				passiveGuideGroup.removeAllElements();
				if(event.cross)
				{
					if(true)
					{
						for each (var vguide:Guideline in event.cross.getVGuidelines()) 
						{
							var vGuideLine:VGuideLine = new VGuideLine();
							vGuideLine.x = vguide.value;
							passiveGuideGroup.addElement(vGuideLine);
						}
						for each (var hguide:Guideline in event.cross.getHGuidelines()) 
						{
							var hGuideLine:HGuideLine = new HGuideLine();
							hGuideLine.y = hguide.value;
							passiveGuideGroup.addElement(hGuideLine);
						}
					}
					
					if(event.transformationType == TransformationType.ROTATE)
					{
						if(event.cross.rGuideline)
						{
							var rTargetGuideLine:RGuideLine = new RGuideLine();
							rTargetGuideLine.update(id_uit_tool.target, passiveGuideGroup);
							passiveGuideGroup.addElement(rTargetGuideLine);
						}
						
						for each (var rguide:Guideline in event.cross.getRGuidelines()) 
						{
							var rGuideLine:RGuideLine = new RGuideLine();
							rGuideLine.update(rguide.userData as Image, passiveGuideGroup);
							passiveGuideGroup.addElement(rGuideLine);
						}
					}
				}
			}	
			
			private function id_image_edit_completeHandler(event:Event):void
			{
				trace("id_image_edit_completeHandler!");
				///Align Image Views.
				this.alignImageView();
				///Image autosize
				this.autoResizeImageView();
				///
				this.selectUITransformTool(new MouseEvent(MouseEvent.CLICK));
			}
		]]>
	</fx:Script>
	<fx:Declarations>                                                                                                     
		<fx:Component className="VGuideLine">
			<s:Line alpha="0.1" y="45" height="230">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
		<fx:Component className="HGuideLine">
			<s:Line alpha="0.1" x="30" width="400">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
		<fx:Component className="RGuideLine">
			<s:Line>
				<fx:Script>
					<![CDATA[
						import com.vstyran.transform.utils.TransformUtil;
						
						import mx.core.UIComponent;
						import spark.components.Group;
						
						public function update(target:UIComponent, passiveGuideGroup:Group):void
						{
							var m:Matrix = TransformUtil.getMatrix(target, passiveGuideGroup);
							
							var stPoimt:Point =  m.transformPoint(new Point(target.width/2, target.height/2));
							var endPoimt:Point =  m.transformPoint(new Point(target.width, target.height/2));
							this.xFrom = stPoimt.x;
							this.yFrom = stPoimt.y;
							this.xTo = endPoimt.x;
							this.yTo = endPoimt.y;
						}
					]]>
				</fx:Script>
				<s:stroke>
					<s:SolidColorStroke color="#AA0000"/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
	</fx:Declarations>               
	
	<s:BorderContainer id="id_border_container" width="100%" height="100%" contentBackgroundAlpha="0"
					   backgroundImage="{viewBackgroundImage}"
					   >
		<components:HW_List_Cert id="id_list" change="id_list_changeHandler(event)" />
		
		<s:Image id="id_image_instruction" x="200" y="60" cachePolicy="off"/>
		
		<s:Group id="id_group" clipAndEnableScrolling="true">
			<!--<s:Image />-->
			<!--<mx:Image maintainAspectRatio="true"-->
			<!--<mx:Image id="id_image_edit" maintainAspectRatio="true"/>-->
			<!--<components:ImageWithSmooth--> 
			<s:Image
				id="id_image_edit" maxWidth="{AppData.MAX_UIT_WIDTH_DEFAULT}" maxHeight="{AppData.MAX_UIT_HEIGHT_DEFAULT}" smooth="true" smoothingQuality="{BitmapSmoothingQuality.HIGH}"/>
		</s:Group>
		
		<s:Image id="id_image_frame" enabled="false"/>
		<s:Image id="id_image_guide" enabled="false"/>
		<!--<s:Image id="id_image_mask" x="{id_image_frame.x}" y="{id_image_frame.y}" enabled="false"/>-->
		
		<view:UITransformTool id="id_uit_tool" skinClass="skins.uiTransformTool.TransformToolSkin3" 
							  transformationComplete="tool_transformationCompleteHandler(event)"
							  guidelinesUpdate="tool_guidelinesUpdateHandler(event)"
							  transformation="tool_transformationHandler(event)"
							  maintainProjectionCenter="true" maintainMoveShortcuts="true"
							  >
			<!--<view:bounds>
				<model:Bounds width="300" height="300"/>
			</view:bounds>-->
			<!--<view:guidelines>
				<model:Guideline type="{GuidelineType.HORIZONTAL_CENTER}" value="400" fraction="3"/>
				<model:Guideline type="{GuidelineType.VERTICAL_CENTER}" value="300" fraction="3"/>
			</view:guidelines>-->
			
		</view:UITransformTool>
		
		<s:Button x="383" y="500" label="RE_UPLOAD" skinClass="skins.button.HW_Back2UploadButton_Skin" click="reupload_button_clickHandler(event)" buttonMode="true" useHandCursor="true"/>
		<s:Button x="505" y="500" label="EDIT_NEXT" skinClass="skins.button.HW_EditorNextButton_Skin" click="editnext_button_clickHandler(event)" buttonMode="true" useHandCursor="true"/>
		<spark:HSlider id="id_hslider_rotate" x="393" y="438" 
					   showTrackHighlight="true" skinClass="skins.slider.HW_EditorRotateHSlider_Skin"
				   change="onEditorRotateSliderChange(event)" stepSize="1" minimum="-180" maximum="180" value="0"
				   width="200" visible="false" includeInLayout="false"
				   />
		<s:Button x="349" y="425" label="ROTATE" skinClass="skins.button.HW_RotateButton_Skin" click="rotate90ButtonClickHandler(event)" visible="false" includeInLayout="false"/>
<!--		<s:Button x="625" y="198" label="ZOOM_IN" skinClass="skins.button.HW_ZoomInButton_Skin" click="zoomInButtonClickHandler(event)"/>
		<s:Button x="625" y="373" label="ZOOM_OUT" skinClass="skins.button.HW_ZoomOutButton_Skin" click="zoomOutButtonClickHandler(event)"/>
		<spark:VSlider id="id_vslider_scale" x="638" y="230"
					   showTrackHighlight="true" skinClass="skins.slider.HW_EditorScaleVSlider_Skin"
				   change="onEditorScaleSliderChange(event)" stepSize="0.1" minimum="0.5" maximum="2" value="1"
				   height="140" 
				   />-->
		
		<s:Group id="passiveGuideGroup" top="0" bottom="0" left="0" right="0"/>
		<s:Line id="vGuide" yFrom="{id_image_frame.y}" yTo="{id_image_frame.height}" depth="3" visible="true">
			<s:stroke>
				<s:SolidColorStroke color="#AA0000"/>
			</s:stroke>
		</s:Line>
		<s:Line id="hGuide" xFrom="{id_image_frame.x}" xTo="{id_image_frame.width}" depth="3" visible="true">
			<s:stroke>
				<s:SolidColorStroke color="#AA0000"/>
			</s:stroke>
		</s:Line>
	</s:BorderContainer>
	
</views:ViewBase>
